!function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);var o=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.equals=function(t){return t.x==this.x&&t.y==this.y},t.prototype.matches=function(t,e){return t==this.x&&e==this.y},t.prototype.clone=function(){return new t(this.x,this.y)},t.prototype.add=function(t){this.x+=t.x,this.y+=t.y},t.zero=function(){return new t(0,0)},t.random=function(){return new t(Math.floor(4*Math.random()),Math.floor(4*Math.random()))},t.add=function(e,n){return new t(e.x+n.x,e.y+n.y)},t}(),r=[0,112,224,336],i=[-12,70,151,232],s=function(){function t(t,e){this.id=Math.random(),this.position=new o(t,e),this.value=Math.random()>=.9?2:1,this.positions=window.innerWidth>600?r:i}return Object.defineProperty(t.prototype,"x",{get:function(){return this.position.x},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this.position.y},enumerable:!1,configurable:!0}),t.prototype.draw=function(){var t=document.getElementById("root"),e=document.createElement("div");return e.classList.add("tile"),e.classList.add("tile-"+this.value),e.innerText=Math.pow(2,this.value).toString(),e.style.left=this.positions[this.position.x]+"px",e.style.top=this.positions[this.position.y]+"px",t.insertAdjacentElement("beforeend",e),this.element=e,this},t.prototype.update=function(t){var e=this;void 0===t&&(t=!1);return this.element.style.left=this.positions[this.position.x]+"px",this.element.style.top=this.positions[this.position.y]+"px",setTimeout((function(){e.element.className="tile tile-"+e.value,e.element.innerText=Math.pow(2,e.value).toString(),t&&e.remove()}),100),this},t.prototype.remove=function(){this.element.remove()},t.from=function(e){return new t(e.x,e.y)},t}();function a(t,e){var n=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];if(e==f.Up)for(var o=0;o<4;o++){for(var r=[],i=0;i<4;i++)r.push(t[o+4*i]);r=u(r);for(i=0;i<4;i++)n[o+4*i]=r[i]}else if(e==f.Left)for(o=0;o<4;o++){for(r=[],i=0;i<4;i++)r.push(t[4*o+i]);r=u(r);for(i=0;i<4;i++)n[4*o+i]=r[i]}else if(e==f.Down)for(o=0;o<4;o++){for(r=[],i=0;i<4;i++)r.push(t[o+4*(3-i)]);r=u(r);for(i=0;i<4;i++)n[o+4*(3-i)]=r[i]}else if(e==f.Right)for(o=0;o<4;o++){for(r=[],i=0;i<4;i++)r.push(t[4*o+(3-i)]);r=u(r);for(i=0;i<4;i++)n[4*o+(3-i)]=r[i]}return n}function u(t){var e=-1,n=0,o=[0,0,0,0];return t.forEach((function(t){0!=t&&(1==e?(e=t,o[n]=t,n++):e==t?(o[n-1]=2*e,e=-1):(e=t,o[n]=t,n++))})),o}var f,p=function(){function t(){this.currentGrid=[],this.maxStep=3,this.best_move=0,this.nodes=0}return t.prototype.run=function(){var t=l.get().getOneDGrid();this.currentGrid=t.map((function(t){return t})),this.startSearch(),c(this.bestMove)},t.prototype.startSearch=function(){this.nodes=0,this.maxStep=3;for(var t=[];;){this.nodes=0;var e=performance.now();if(this.search(this.currentGrid,0),t.push(performance.now()-e),this.nodes>=1e4||this.maxStep>=8)break;this.maxStep+=1}},t.prototype.search=function(t,e){if(this.nodes++,e==this.maxStep)return this.estimate(t);var n=-1;for(var o in f)if(!isNaN(Number(o))){var r=a(t,Number(o)),i=r.reduce((function(t,e){return t+e}));if(!1===r.every((function(e,n){return e==t[n]}))){for(var s=0,u=0,p=0;p<16;++p)0===r[p]&&(r[p]=2,++u,s+=.9*this.search(r,e+1),r[p]=4,s+=.1*this.search(r,e+1),r[p]=0);0!=u?s/=u:s=-1e20,i+s>n&&(n=i+s,0==e&&(this.bestMove=Number(o)))}}return n},t.prototype.estimate=function(t){for(var e=0,n=0,o=0;o<16;o++)0==t[o]&&0,e+=t[o],o%4!=3&&(n+=Math.abs(t[o]-t[o+1])),o<12&&(n+=Math.abs(t[o]-t[o+4]));return 2*(4*e-n)},t}(),l=function(){function t(){this.ai=new p,this.stop=!1,this.fast=!1,this.score=0,this.board=[[null,null,null,null],[null,null,null,null],[null,null,null,null],[null,null,null,null]],this.prevTime=0}return t.get=function(){return t.instance||(t.instance=new t),t.instance},t.newGame=function(){for(var t=this.instance,e=0;e<4;e++)for(var n=0;n<4;n++){var r=t.board[e][n];r&&(t.board[e][n]=null,r.remove())}for(var i=o.random(),a=o.random();i.equals(a);)a=o.random();var u=s.from(i).draw(),f=s.from(a).draw();t.board[u.x][u.y]=u,t.board[f.x][f.y]=f},t.prototype.boardCopy=function(){for(var t=[],e=0;e<4;e++){var n=this.board[e].map((function(t){return t}));t.push(n)}return t},t.prototype.logBoard=function(t){for(var e=t||this.board,n="",o=0;o<4;o++){for(var r=[],i=0;i<4;i++){var s=e[i][o];s?r.push(Math.pow(2,s.value)):r.push(0)}n+=r.join("\t"),n+="\n"}console.log(n)},Object.defineProperty(t.prototype,"tiles",{get:function(){for(var t=[],e=0;e<4;e++)for(var n=0;n<4;n++){var o=this.board[e][n];o&&t.push(o)}return t},enumerable:!1,configurable:!0}),t.prototype.nextMove=function(t){void 0===t&&(t=100);for(var e=o.random();this.tiles.some((function(t){return t.position.equals(e)}));)e=o.random();var n=s.from(e).draw();this.board[n.x][n.y]=n},t.prototype.getOneDGrid=function(){for(var t=[],e=0;e<4;e++)for(var n=0;n<4;n++){var o=this.board[n][e];o?t.push(Math.pow(2,o.value)):t.push(0)}return t},t.prototype.startAI=function(){var t=this,e=performance.now();this.ai.run();var n=performance.now();if(this.stop)this.stop=!1;else{document.getElementById("score").innerText="Score: "+this.score;var o=100-(n-e);this.fast?requestAnimationFrame((function(){t.startAI()})):setTimeout((function(){t.stop?t.stop=!1:t.startAI()}),o<0?0:o)}},t}();function c(t){var e,n,r,i=l.get(),s=i.boardCopy(),a=i.tiles;t==f.Up?(e=new o(0,0),n=new o(0,-1),r=!0):t==f.Down?(e=new o(0,3),n=new o(0,1),r=!0):t==f.Left?(e=new o(0,0),n=new o(-1,0),r=!1):(e=new o(3,0),n=new o(1,0),r=!1);for(var u=[],p=0;p<4;p++){for(var c=0;c<4;c++){var h=e.clone();r?h.x+=c:h.y+=c,u.push(h)}e.x-=n.x,e.y-=n.y}for(var d=!1,v=0;v<u.length;v++){var y=function(t){var e=a[t];if(e.position.equals(u[v])){var r=e.position.clone();s[e.x][e.y]=null;var f,p=o.add(e.position,n),l=0;if(p.x<0||p.x>3||p.y<0||p.y>3)p=e.position.clone();else for(l=(f=s[p.x][p.y])?f.value:0;0==l;){if(e.position=p.clone(),(p=o.add(e.position,n)).x<0||p.x>3||p.y<0||p.y>3){p=e.position.clone();break}l=(f=s[p.x][p.y])?f.value:0}if(l==e.value)return(f=a[a.findIndex((function(t){return t.position.equals(p)&&t.id!=e.id}))]).value+=1,i.score+=Math.pow(2,f.value),e.position=p,s[f.x][f.y]=f,e.update(!0),a.splice(t,1),e.position.equals(r)||(d=!0),"continue";s[e.x][e.y]=e,e.position.equals(r)||(d=!0)}};for(p=0;p<a.length;p++)y(p)}a.forEach((function(t){t.update()})),d?(i.board=s,i.nextMove()):i.stop=!0}function h(){document.getElementById("root");for(var t=o.random(),e=o.random();t.equals(e);)e=o.random();var n=s.from(t).draw(),r=s.from(e).draw(),i=l.get();i.board[n.x][n.y]=n,i.board[r.x][r.y]=r,window.addEventListener("keyup",(function(t){38==t.which?c(f.Up):40==t.which?c(f.Down):37==t.which?c(f.Left):39==t.which&&c(f.Right),document.getElementById("score").innerText="Score: "+l.get().score}))}!function(t){t[t.Up=1]="Up",t[t.Down=2]="Down",t[t.Left=3]="Left",t[t.Right=4]="Right"}(f||(f={})),window.Game=l,h()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,