!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);var r=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.equals=function(t){return t.x==this.x&&t.y==this.y},t.prototype.matches=function(t,e){return t==this.x&&e==this.y},t.prototype.clone=function(){return new t(this.x,this.y)},t.prototype.add=function(t){this.x+=t.x,this.y+=t.y},t.zero=function(){return new t(0,0)},t.random=function(){return new t(Math.floor(4*Math.random()),Math.floor(4*Math.random()))},t.add=function(e,n){return new t(e.x+n.x,e.y+n.y)},t}(),o=[0,112,224,336],i=function(){function t(t,e){this.id=Math.random(),this.position=new r(t,e),this.value=Math.random()>=.9?2:1}return Object.defineProperty(t.prototype,"x",{get:function(){return this.position.x},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this.position.y},enumerable:!1,configurable:!0}),t.prototype.draw=function(){var t=document.getElementById("root"),e=document.createElement("div");return e.classList.add("tile"),e.classList.add("tile-"+this.value),e.innerText=Math.pow(2,this.value).toString(),e.style.left=o[this.position.x]+"px",e.style.top=o[this.position.y]+"px",t.insertAdjacentElement("beforeend",e),this.element=e,this},t.prototype.update=function(t){var e=this;void 0===t&&(t=!1);return this.element.style.left=o[this.position.x]+"px",this.element.style.top=o[this.position.y]+"px",setTimeout((function(){e.element.className="tile tile-"+e.value,e.element.innerText=Math.pow(2,e.value).toString(),t&&e.remove()}),100),this},t.prototype.remove=function(){this.element.remove()},t.from=function(e){return new t(e.x,e.y)},t}();function a(t,e){var n=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];if(e==s.Up)for(var r=0;r<4;r++){for(var o=[],i=0;i<4;i++)o.push(t[r+4*i]);o=u(o);for(i=0;i<4;i++)n[r+4*i]=o[i]}else if(e==s.Left)for(r=0;r<4;r++){for(o=[],i=0;i<4;i++)o.push(t[4*r+i]);o=u(o);for(i=0;i<4;i++)n[4*r+i]=o[i]}else if(e==s.Down)for(r=0;r<4;r++){for(o=[],i=0;i<4;i++)o.push(t[r+4*(3-i)]);o=u(o);for(i=0;i<4;i++)n[r+4*(3-i)]=o[i]}else if(e==s.Right)for(r=0;r<4;r++){for(o=[],i=0;i<4;i++)o.push(t[4*r+(3-i)]);o=u(o);for(i=0;i<4;i++)n[4*r+(3-i)]=o[i]}return n}function u(t){var e=-1,n=0,r=[0,0,0,0];return t.forEach((function(t){0!=t&&(1==e?(e=t,r[n]=t,n++):e==t?(r[n-1]=2*e,e=-1):(e=t,r[n]=t,n++))})),r}var s,f=function(){function t(){this.currentGrid=[],this.maxStep=3,this.best_move=0,this.nodes=0}return t.prototype.run=function(){var t=l.get().getOneDGrid();this.currentGrid=t.map((function(t){return t})),this.startSearch(),c(this.bestMove)},t.prototype.startSearch=function(){this.nodes=0,this.maxStep=3;for(var t=[];;){this.nodes=0;var e=performance.now();if(this.search(this.currentGrid,0),t.push(performance.now()-e),this.nodes>=1e4||this.maxStep>=8)break;this.maxStep+=1}},t.prototype.search=function(t,e){if(this.nodes++,e==this.maxStep)return this.estimate(t);var n=-1;for(var r in s)if(!isNaN(Number(r))){var o=a(t,Number(r)),i=o.reduce((function(t,e){return t+e}));if(!1===o.every((function(e,n){return e==t[n]}))){for(var u=0,f=0,l=0;l<16;++l)0===o[l]&&(o[l]=2,++f,u+=.9*this.search(o,e+1),o[l]=4,u+=.1*this.search(o,e+1),o[l]=0);0!=f?u/=f:u=-1e20,i+u>n&&(n=i+u,0==e&&(this.bestMove=Number(r)))}}return n},t.prototype.estimate=function(t){for(var e=0,n=0,r=0;r<16;r++)0==t[r]&&0,e+=t[r],r%4!=3&&(n+=Math.abs(t[r]-t[r+1])),r<12&&(n+=Math.abs(t[r]-t[r+4]));return 2*(4*e-n)},t}(),l=function(){function t(){this.ai=new f,this.stop=!1,this.fast=!1,this.score=0,this.board=[[null,null,null,null],[null,null,null,null],[null,null,null,null],[null,null,null,null]],this.prevTime=0}return t.get=function(){return t.instance||(t.instance=new t),t.instance},t.newGame=function(){for(var t=this.instance,e=0;e<4;e++)for(var n=0;n<4;n++){var o=t.board[e][n];o&&(t.board[e][n]=null,o.remove())}for(var a=r.random(),u=r.random();a.equals(u);)u=r.random();var s=i.from(a).draw(),f=i.from(u).draw();t.board[s.x][s.y]=s,t.board[f.x][f.y]=f},t.prototype.boardCopy=function(){for(var t=[],e=0;e<4;e++){var n=this.board[e].map((function(t){return t}));t.push(n)}return t},t.prototype.logBoard=function(t){for(var e=t||this.board,n="",r=0;r<4;r++){for(var o=[],i=0;i<4;i++){var a=e[i][r];a?o.push(Math.pow(2,a.value)):o.push(0)}n+=o.join("\t"),n+="\n"}console.log(n)},Object.defineProperty(t.prototype,"tiles",{get:function(){for(var t=[],e=0;e<4;e++)for(var n=0;n<4;n++){var r=this.board[e][n];r&&t.push(r)}return t},enumerable:!1,configurable:!0}),t.prototype.nextMove=function(t){void 0===t&&(t=100);for(var e=r.random();this.tiles.some((function(t){return t.position.equals(e)}));)e=r.random();var n=i.from(e).draw();this.board[n.x][n.y]=n},t.prototype.getOneDGrid=function(){for(var t=[],e=0;e<4;e++)for(var n=0;n<4;n++){var r=this.board[n][e];r?t.push(Math.pow(2,r.value)):t.push(0)}return t},t.prototype.startAI=function(){var t=this,e=performance.now();this.ai.run();var n=performance.now();if(this.stop)this.stop=!1;else{document.getElementById("score").innerText="Score: "+this.score;var r=100-(n-e);this.fast?requestAnimationFrame((function(){t.startAI()})):setTimeout((function(){t.stop?t.stop=!1:t.startAI()}),r<0?0:r)}},t}();function c(t){var e,n,o,i=l.get(),a=i.boardCopy(),u=i.tiles;t==s.Up?(e=new r(0,0),n=new r(0,-1),o=!0):t==s.Down?(e=new r(0,3),n=new r(0,1),o=!0):t==s.Left?(e=new r(0,0),n=new r(-1,0),o=!1):(e=new r(3,0),n=new r(1,0),o=!1);for(var f=[],c=0;c<4;c++){for(var p=0;p<4;p++){var h=e.clone();o?h.x+=p:h.y+=p,f.push(h)}e.x-=n.x,e.y-=n.y}for(var d=!1,v=0;v<f.length;v++){var y=function(t){var e=u[t];if(e.position.equals(f[v])){var o=e.position.clone();a[e.x][e.y]=null;var s,l=r.add(e.position,n),c=0;if(l.x<0||l.x>3||l.y<0||l.y>3)l=e.position.clone();else for(c=(s=a[l.x][l.y])?s.value:0;0==c;){if(e.position=l.clone(),(l=r.add(e.position,n)).x<0||l.x>3||l.y<0||l.y>3){l=e.position.clone();break}c=(s=a[l.x][l.y])?s.value:0}if(c==e.value)return(s=u[u.findIndex((function(t){return t.position.equals(l)&&t.id!=e.id}))]).value+=1,i.score+=Math.pow(2,s.value),e.position=l,a[s.x][s.y]=s,e.update(!0),u.splice(t,1),e.position.equals(o)||(d=!0),"continue";a[e.x][e.y]=e,e.position.equals(o)||(d=!0)}};for(c=0;c<u.length;c++)y(c)}u.forEach((function(t){t.update()})),d?(i.board=a,i.nextMove()):i.stop=!0}function p(){document.getElementById("root");for(var t=r.random(),e=r.random();t.equals(e);)e=r.random();var n=i.from(t).draw(),o=i.from(e).draw(),a=l.get();a.board[n.x][n.y]=n,a.board[o.x][o.y]=o,window.addEventListener("keyup",(function(t){38==t.which?c(s.Up):40==t.which?c(s.Down):37==t.which?c(s.Left):39==t.which&&c(s.Right),document.getElementById("score").innerText="Score: "+l.get().score}))}!function(t){t[t.Up=1]="Up",t[t.Down=2]="Down",t[t.Left=3]="Left",t[t.Right=4]="Right"}(s||(s={})),window.Game=l,p()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,