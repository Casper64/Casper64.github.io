!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";n.r(e);var r=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.equals=function(t){return t.x==this.x&&t.y==this.y},t.prototype.matches=function(t,e){return t==this.x&&e==this.y},t.prototype.clone=function(){return new t(this.x,this.y)},t.prototype.add=function(t){this.x+=t.x,this.y+=t.y},t.zero=function(){return new t(0,0)},t.random=function(){return new t(Math.floor(4*Math.random()),Math.floor(4*Math.random()))},t.add=function(e,n){return new t(e.x+n.x,e.y+n.y)},t}(),o=[0,112,224,336],i=[-12,70,151,232],a=function(){function t(t,e){this.id=Math.random(),this.position=new r(t,e),this.value=Math.random()>=.9?2:1,this.positions=window.innerWidth>600?o:i}return Object.defineProperty(t.prototype,"x",{get:function(){return this.position.x},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this.position.y},enumerable:!1,configurable:!0}),t.prototype.draw=function(){var t=document.getElementById("root"),e=document.createElement("div");return e.classList.add("tile"),e.classList.add("tile-"+this.value),e.innerText=Math.pow(2,this.value).toString(),e.style.left=this.positions[this.position.x]+"px",e.style.top=this.positions[this.position.y]+"px",t.insertAdjacentElement("beforeend",e),this.element=e,this},t.prototype.update=function(t){var e=this;void 0===t&&(t=!1);return this.element.style.left=this.positions[this.position.x]+"px",this.element.style.top=this.positions[this.position.y]+"px",setTimeout((function(){e.element.className="tile tile-"+e.value,e.element.innerText=Math.pow(2,e.value).toString(),t&&e.remove()}),100),this},t.prototype.remove=function(){this.element.remove()},t.from=function(e){return new t(e.x,e.y)},t}();function s(t,e){var n=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];if(e==f.Up)for(var r=0;r<4;r++){for(var o=[],i=0;i<4;i++)o.push(t[r+4*i]);o=u(o);for(i=0;i<4;i++)n[r+4*i]=o[i]}else if(e==f.Left)for(r=0;r<4;r++){for(o=[],i=0;i<4;i++)o.push(t[4*r+i]);o=u(o);for(i=0;i<4;i++)n[4*r+i]=o[i]}else if(e==f.Down)for(r=0;r<4;r++){for(o=[],i=0;i<4;i++)o.push(t[r+4*(3-i)]);o=u(o);for(i=0;i<4;i++)n[r+4*(3-i)]=o[i]}else if(e==f.Right)for(r=0;r<4;r++){for(o=[],i=0;i<4;i++)o.push(t[4*r+(3-i)]);o=u(o);for(i=0;i<4;i++)n[4*r+(3-i)]=o[i]}return n}function u(t){var e=-1,n=0,r=[0,0,0,0];return t.forEach((function(t){0!=t&&(1==e?(e=t,r[n]=t,n++):e==t?(r[n-1]=2*e,e=-1):(e=t,r[n]=t,n++))})),r}var f,c=function(){function t(){this.currentGrid=[],this.maxStep=3,this.best_move=0,this.nodes=0}return t.prototype.run=function(){var t=l.get().getOneDGrid();this.currentGrid=t.map((function(t){return t})),this.startSearch(),p(this.bestMove)},t.prototype.startSearch=function(){this.nodes=0,this.maxStep=3;for(var t=[];;){this.nodes=0;var e=performance.now();if(this.search(this.currentGrid,0),t.push(performance.now()-e),this.nodes>=1e4||this.maxStep>=8)break;this.maxStep+=1}},t.prototype.search=function(t,e){if(this.nodes++,e==this.maxStep)return this.estimate(t);var n=-1;for(var r in f)if(!isNaN(Number(r))){var o=s(t,Number(r)),i=o.reduce((function(t,e){return t+e}));if(!1===o.every((function(e,n){return e==t[n]}))){for(var a=0,u=0,c=0;c<16;++c)0===o[c]&&(o[c]=2,++u,a+=.9*this.search(o,e+1),o[c]=4,a+=.1*this.search(o,e+1),o[c]=0);0!=u?a/=u:a=-1e20,i+a>n&&(n=i+a,0==e&&(this.bestMove=Number(r)))}}return n},t.prototype.estimate=function(t){for(var e=0,n=0,r=0;r<16;r++)0==t[r]&&0,e+=t[r],r%4!=3&&(n+=Math.abs(t[r]-t[r+1])),r<12&&(n+=Math.abs(t[r]-t[r+4]));return 2*(4*e-n)},t}(),l=function(){function t(){this.ai=new c,this.stop=!1,this.fast=!1,this.score=0,this.board=[[null,null,null,null],[null,null,null,null],[null,null,null,null],[null,null,null,null]],this.prevTime=0}return t.get=function(){return t.instance||(t.instance=new t),t.instance},t.newGame=function(){for(var t=this.instance,e=0;e<4;e++)for(var n=0;n<4;n++){var o=t.board[e][n];o&&(t.board[e][n]=null,o.remove())}for(var i=r.random(),s=r.random();i.equals(s);)s=r.random();var u=a.from(i).draw(),f=a.from(s).draw();t.board[u.x][u.y]=u,t.board[f.x][f.y]=f},t.prototype.boardCopy=function(){for(var t=[],e=0;e<4;e++){var n=this.board[e].map((function(t){return t}));t.push(n)}return t},t.prototype.logBoard=function(t){for(var e=t||this.board,n="",r=0;r<4;r++){for(var o=[],i=0;i<4;i++){var a=e[i][r];a?o.push(Math.pow(2,a.value)):o.push(0)}n+=o.join("\t"),n+="\n"}console.log(n)},Object.defineProperty(t.prototype,"tiles",{get:function(){for(var t=[],e=0;e<4;e++)for(var n=0;n<4;n++){var r=this.board[e][n];r&&t.push(r)}return t},enumerable:!1,configurable:!0}),t.prototype.nextMove=function(t){void 0===t&&(t=100);for(var e=r.random();this.tiles.some((function(t){return t.position.equals(e)}));)e=r.random();var n=a.from(e).draw();this.board[n.x][n.y]=n},t.prototype.getOneDGrid=function(){for(var t=[],e=0;e<4;e++)for(var n=0;n<4;n++){var r=this.board[n][e];r?t.push(Math.pow(2,r.value)):t.push(0)}return t},t.prototype.startAI=function(){var t=this,e=performance.now();this.ai.run();var n=performance.now();if(this.stop)this.stop=!1;else{document.getElementById("score").innerText="Score: "+this.score;var r=100-(n-e);this.fast?requestAnimationFrame((function(){t.startAI()})):setTimeout((function(){t.stop?t.stop=!1:t.startAI()}),r<0?0:r)}},t.prototype.newGame=function(){this.tiles.forEach((function(t){t.remove()}));for(var t=0;t<4;t++)for(var e=0;e<4;e++)this.board[t][e]=null;for(var n=r.random(),o=r.random();n.equals(o);)o=r.random();var i=a.from(n).draw(),s=a.from(o).draw();this.board[i.x][i.y]=i,this.board[s.x][s.y]=s,this.score=0,document.getElementById("score").innerHTML="Score: 0"},t}();function p(t){var e,n,o,i=l.get(),a=i.boardCopy(),s=i.tiles;t==f.Up?(e=new r(0,0),n=new r(0,-1),o=!0):t==f.Down?(e=new r(0,3),n=new r(0,1),o=!0):t==f.Left?(e=new r(0,0),n=new r(-1,0),o=!1):(e=new r(3,0),n=new r(1,0),o=!1);for(var u=[],c=0;c<4;c++){for(var p=0;p<4;p++){var h=e.clone();o?h.x+=p:h.y+=p,u.push(h)}e.x-=n.x,e.y-=n.y}for(var d=!1,v=0;v<u.length;v++){var m=function(t){var e=s[t];if(e.position.equals(u[v])){var o=e.position.clone();a[e.x][e.y]=null;var f,c=r.add(e.position,n),l=0;if(c.x<0||c.x>3||c.y<0||c.y>3)c=e.position.clone();else for(l=(f=a[c.x][c.y])?f.value:0;0==l;){if(e.position=c.clone(),(c=r.add(e.position,n)).x<0||c.x>3||c.y<0||c.y>3){c=e.position.clone();break}l=(f=a[c.x][c.y])?f.value:0}if(l==e.value)return(f=s[s.findIndex((function(t){return t.position.equals(c)&&t.id!=e.id}))]).value+=1,i.score+=Math.pow(2,f.value),e.position=c,a[f.x][f.y]=f,e.update(!0),s.splice(t,1),e.position.equals(o)||(d=!0),"continue";a[e.x][e.y]=e,e.position.equals(o)||(d=!0)}};for(c=0;c<s.length;c++)m(c)}s.forEach((function(t){t.update()})),d?(i.board=a,i.nextMove()):i.stop=!0}function h(){document.getElementById("root");for(var t=r.random(),e=r.random();t.equals(e);)e=r.random();var n=a.from(t).draw(),o=a.from(e).draw(),i=l.get();i.board[n.x][n.y]=n,i.board[o.x][o.y]=o,window.addEventListener("keyup",(function(t){38==t.which?p(f.Up):40==t.which?p(f.Down):37==t.which?p(f.Left):39==t.which&&p(f.Right),document.getElementById("score").innerText="Score: "+l.get().score}))}!function(t){t[t.Up=1]="Up",t[t.Down=2]="Down",t[t.Left=3]="Left",t[t.Right=4]="Right"}(f||(f={})),window.Game=l,h()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,